
"use strict";

var db = require('./lib/db.js'),
    fields = require('./lib/fields.js'),
    model = require('./lib/model.js'),
    models = require('./lib/model.js'),
    schemes = require('./lib/schemes.js'),
    validator = require('./lib/validator.js');


module.exports = {
    db: db,
    fields: fields,
    model: model,
    models: models,
    schemes: schemes,
    validator: validator
};

/*
noject.db = {

    query:function (query, params) {
        db.query(query, params, function (err, results) {
            if (err) {
                //
            } else {
                //
            }
        });
    },


    registerModel:function (model) {
        var model_static_method = {};

        model_static_method.create = function (data) {
            var newNode = db.createNode(data);
            noject.models[model.type]._node = newNode;
            noject.models[model.type].data = newNode.data;
            return noject.models[model.type];
        };

        model_static_method.getById = function (id) {
            //return model;
            // this.models.person.create(data);

            db.getNodeById(id, function (err, node) {
                if (err) {
                    //
                } else {
                    //
                }
            });
        };

        model_static_method.getAll = function () {
            //return models
            var index_name = 'nodes';
            var index_key = 'type';
            var index_value = model.type;

            db.getIndexedNode(index_name, index_key, index_value, function (err, node) {
                if (err) {
                    //
                } else {
                    //
                }
            });
        };

        //
        // go through indexes
        //
        for (var key in model.scheme) {
            var val = model.scheme[key];

            if (val.index) {
                var getMethod = 'getBy' + key[0].toUpperCase() + key.slice(1);

                //return models
                var index_name = 'nodes';
                var index_key = key;

                model_static_method[getMethod] = function (index_value) {
                    var index_value = index_value || '';

                    db.getIndexedNode(index_name, index_key, index_value, function (err, node) {
                        if (err) {
                            //
                        } else {
                            //
                        }
                    });
                };
            }
        }

        //
        // assign the new model static methods to the db model
        //
        noject.db[model.type] = model_static_method;
    }
};


noject.fields = {
    String:function (scheme) {
        var rule = scheme || {};
        rule.type = 'string';
        rule.isValid = function (value) {
            //go through rules with value
            return true;
        };

        return rule;
    },
    Rel:function (type, scheme) {
        //target, noun, plural is required
        //all relationships will be outgoing only

        var rule = scheme || {};
        rule.type = type;
        //type
        //target
        //noun
        //help_text
        //plural
        //data
        return rule;
    }
    //...
};


noject.models = {

    create_model:function (type, scheme) {
        var model = {};

        model.type = type;
        model.data = {};
        model._node = {};
        model.scheme = scheme;

        //create things from scheme

        model.save = function () {

            console.log('model.save()');
            //check if there is

            //validate data based on scheme

            //save
            model._node.save(function (err, node) {
                if (err) {
                    console.log('node save ERROR');
                } else {



                    //
                    // create not unique index with:   index_name: nodes, index_key: type, index_value: model.type
                    //

                    var index_name = 'nodes';
                    var index_key = 'type';
                    var index_value = model.type;

                    //
                    // default index for this type of models
                    //
                    node.index(index_name, index_key, index_value, function (err) {
                        if (err) {
                            console.log(err);
                        } else {
                            //create indexes from the scheme unique/not unique
                            createAdditionalIndexes();
                        }
                        //not unique index
                    }, false);



                    //
                    // index count
                    //
                    var currentAdditionalIndex = 0;
                    var totalAdditionalIndex = 0;
                    var indexes = {};

                    for (var key in model.scheme) {
                        var val = model.scheme[key];
                        if (val.index) {
                            indexes[key] = val;
                            totalAdditionalIndex++;
                        }
                    }

                    function createAdditionalIndexes() {
                        for (var ikey in indexes) {

                            var ival = model.data[ikey];
                            var unique = indexes[ikey].unique || false;

                            var index_name = model.type;
                            var index_key = ikey;
                            var index_value = ival;

                            //
                            // default index for this type of models
                            //
                            node.index(index_name, index_key, index_value, function (err) {
                                if (err) {
                                    currentAdditionalIndex++;
                                    if (currentAdditionalIndex === totalAdditionalIndex) {
                                        console.log('ALL ADDITIONAL IDEXES ARE CREATED: ERRORFULL');
                                    }

                                    if (unique) {
                                        console.log('ERROR: the is a model with that unique property');
                                    } else {
                                        console.log('index node error');
                                    }
                                } else {
                                    currentAdditionalIndex++;
                                    if (currentAdditionalIndex === totalAdditionalIndex) {
                                        console.log('ALL ADDITIONAL IDEXES ARE CREATED: SUCCESSFULL');
                                    }
                                    console.log('new index');
                                    console.log(node.id);
                                    //create indexes from the scheme unique/not unique
                                }
                            }, unique);
                        }
                    }
                }
            });


        };

        model.del = function () {
            console.log('model.del()');
            //delete
            //delete indexes
        };

        //
        // traverse scheme
        //
        for (var key in scheme) {
            var val = scheme[key];

            //if(val.index) {
            //
            //}

            //if there is a type it's relationship
            if (val.target && val.noun && val.plural) {
                //create methods for this relationship
                var getMethod = 'get' + val.plural[0].toUpperCase() + val.plural.slice(1);
                var filterMethod = 'filter' + val.plural[0].toUpperCase() + val.plural.slice(1);
                var addMethod = 'add' + val.noun[0].toUpperCase() + val.noun.slice(1);
                var removeMethod = 'remove' + val.noun[0].toUpperCase() + val.noun.slice(1);

                model[getMethod] = function () {

                };

                model[addMethod] = function (end_node_id) {

                };

                model[removeMethod] = function (end_node_id) {

                };


                model[filterMethod] = function (params) {

                };
            }
        }

        //
        // add model in to models
        //
        noject.models[type] = model;

        //
        // register to db so db can create static methods for getting data from neo4j
        //
        noject.db.registerModel(model);
    }

};

    */