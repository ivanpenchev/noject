/**
 * created by: Nikolai Aleksandrenko
 * email: aleksandrenko@gmail.com
 * www: aleksandrenko.com
 */

"use strict";

var schemes = require('./schemes.js'),
  check = require('../node_modules/validator').check;

module.exports = {

  /**
   * Validate current property
   * @param modelType {string}
   * @param propertyKey {string}
   * @param propertyValue
   * @returns {boolean}
   */
  validateProperty: function(modelType, propertyKey, propertyValue) {
    var scheme = schemes[modelType][propertyKey],
        isValid = true;

    Object.keys(scheme).forEach(function (key) {
      var ruleValue = scheme[key],
          value = propertyValue,
          rule = key;

      // ---------------------------------------------------
      // going trough all the possible rule types
      // ---------------------------------------------------

      //console.log(value + ' must be: ');
      //console.log(rule);
      //console.log(ruleValue);
      //console.log('');

      if (rule === 'minLength') {
        if (value.length < ruleValue) {
          isValid = false;
          //console.log('ERROR: ' + key + ' is too short (min: ' + ruleValue + ')');
        }
      }
      else if (rule === 'maxLength') {
        if (value.length > ruleValue) {
          isValid = false;
          //console.log('ERROR: ' + key + ' is too long (max: ' + ruleValue + ')');
        }
      }
      else if (rule === 'type') {

        switch (ruleValue) {
          case 'string':
            if (typeof(value) !== 'string') {
              isValid = false;
              //console.log('ERROR: ' + key + ' is not a required type. Must be a ' + ruleValue + '.');
            }
            break;
          case 'int':
            try {
              check(value).isInt();
            }
            catch (e) {
              isValid = false;
              //console.log(e.name + ': ' + e.message);
            }
            break;
          case 'number':
            try {
              check(value).isFloat();
            }
            catch (e) {
              isValid = false;
              //console.log(e.name + ': ' + e.message);
            }
            break;
          case 'boolean':
            if (typeof(value) !== 'boolean') {
              isValid = false;
              //console.log('ERROR: ' + key + ' is not a required type. Must be a ' + ruleValue + '.');
            }
            break;
          case 'email':
            try {
              check(value).isEmail();
            }
            catch (e) {
              isValid = false;
              //console.log(e.name + ': ' + e.message);
            }
            break;
          case 'url':
            try {
              check(value).isUrl();
            }
            catch (e) {
              isValid = false;
              //console.log(e.name + ': ' + e.message);
            }
            break;
          case 'img':
            try {
              check(value).isUrl();
              if (!(value.indexOf('.png') !== -1 || value.indexOf('.jpg') !== -1)) {
                isValid = false;
              }
            }
            catch (e) {
              isValid = false;
              //console.log(e.name + ': ' + e.message);
            }
            break;
          case 'datatime':
            try {
              check(value).isDate();
            }
            catch (e) {
              isValid = false;
              //console.log(e.name + ': ' + e.message);
            }
            break;
          case 'slug':
            if (typeof(value) === 'number') {
              isValid = false;
            }

            try {
              check(value).notEmpty().notContains(' ');
            }
            catch (e) {
              isValid = false;
              //console.log(e.name + ': ' + e.message);
            }
            break;

          default:
            break;
        }
      }

      // ---------------------------------------------------
      // end of rules types check in
      // ---------------------------------------------------

    });

    return isValid;
  },

  /**
   * Validate the model param values against the model's scheme.
   * @param {Object} scheme
   * @param {Object} data - Key: value data to be validated against the scheme.
   * @return {boolean}
   */
  validate: function (modelType, data) {
    var isValid = true;

    if (schemes[modelType]) {
      var scheme = schemes[modelType];

      Object.keys(data).forEach(function (key) {
        var value = data[key];

        //there is no schema rules for this property
        if (scheme[key] === undefined) {
          isValid = false;
        } else {
          //check if the data value is valid based on the scheme

          isValid = this.validateProperty(modelType, key, value);

        }

      });
    }

    return isValid;
  }
};