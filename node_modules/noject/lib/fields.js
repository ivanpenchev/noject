/**
 * created by: Nikolai Aleksandrenko
 * email: aleksandrenko@gmail.com
 * www: aleksandrenko.com
 */

"use strict";

/**
 * Checking is used scheme are acceptable for the current field/type
 * @param scheme
 * @param acceptableScheme
 * @private
 * @return {boolean}
 */
function schemeIsValid(scheme, acceptableScheme) {
  var isValid = true;

  Object.keys(scheme).forEach(function (param) {
    //if used param is not in acceptable scheme string
    if (acceptableScheme.indexOf(param) === -1) {
      isValid = false;
    }
  });

  return isValid;
}

module.exports = {
  /**
   * Used fot string parameters in the model
   * @param {object} scheme - Key:Value object describing what values can be set to this model's parameter.
   * @constructor
   * @return {Object}
   */
  String: function (scheme) {
    var acceptableScheme = 'minLength, maxLength, helpText, index, unique, choices, default';

    if (schemeIsValid(scheme, acceptableScheme)) {
      scheme.type = 'string';
      scheme.default = '';

      return scheme;
    } else {
      throw new Error('Used not acceptable param in scheme.');
    }

  },
  /**
   * Used fot number of type init parameters in the model
   * @param {object} scheme - Key:Value object describing what values can be set to this model's parameter.
   * @constructor
   * @return {Object}
   */
  Int: function (scheme) {
    var acceptableScheme = 'min, max, helpText, choices, default';

    if (schemeIsValid(scheme, acceptableScheme)) {
      scheme.type = 'int';
      scheme.default = 0;
    } else {
      throw new Error('Used not acceptable param in scheme.');
    }

    return scheme;
  },
  /**
   * Used fot numbers parameters in the model
   * @param {object} scheme - Key:Value object describing what values can be set to this model's parameter.
   * @constructor
   * @return {Object}
   */
  Number: function (scheme) {
    var acceptableScheme = 'min, max, helpText, choices, default';

    if (schemeIsValid(scheme, acceptableScheme)) {
      scheme.type = 'number';
      scheme.default = 0;
    } else {
      throw new Error('Used not acceptable param in scheme.');
    }

    return scheme;
  },
  /**
   * Used fot boolean parameters in the model
   * @param {object} scheme - Key:Value object describing what values can be set to this model's parameter.
   * @constructor
   * @return {Object}
   */
  Boolean: function (scheme) {
    var acceptableScheme = 'default, helpText';

    if (schemeIsValid(scheme, acceptableScheme)) {
      scheme.type = 'boolean';
      scheme.default = false;
    } else {
      throw new Error('Used not acceptable param in scheme.');
    }

    return scheme;
  },
  /**
   * Used fot strings that must validate as email.
   * @param {object} scheme - Key:Value object describing what values can be set to this model's parameter.
   * @constructor
   * @return {Object}
   */
  Email: function (scheme) {
    var acceptableScheme = 'minLength, maxLength, helpText, index, unique, default';

    if (schemeIsValid(scheme, acceptableScheme)) {
      scheme.type = 'email';
      scheme.default = '';
    } else {
      throw new Error('Used not acceptable param in scheme.');
    }

    return scheme;
  },
  /**
   * Used fot strings that must validate as url.
   * @param {object} scheme - Key:Value object describing what values can be set to this model's parameter.
   * @constructor
   * @return {Object}
   */
  Url: function (scheme) {
    var acceptableScheme = 'minLength, maxLength, helpText, index, default';

    if (schemeIsValid(scheme, acceptableScheme)) {
      scheme.type = 'url';
      scheme.default = '';
    } else {
      throw new Error('Used not acceptable param in scheme.');
    }

    return scheme;
  },
  /**
   * Used fot string that must validate for valid url and ending with .jpg, .png, jpeg, bmp
   * @param {object} scheme - Key:Value object describing what values can be set to this model's parameter.
   * @constructor
   * @return {Object}
   */
  Img: function (scheme) {
    var acceptableScheme = 'minLength, maxLength, helpText, default';

    if (schemeIsValid(scheme, acceptableScheme)) {
      scheme.type = 'img';
      scheme.default = '';
    } else {
      throw new Error('Used not acceptable param in scheme.');
    }

    return scheme;
  },
  /**
   * Used fot datetime parameters in the model
   * @param {object} scheme - Key:Value object describing what values can be set to this model's parameter.
   * @constructor
   * @return {Object}
   */
  DataTime: function (scheme) {
    var acceptableScheme = 'default, helpText';

    if (schemeIsValid(scheme, acceptableScheme)) {
      scheme.type = 'datatime';
      scheme.default = '';
    } else {
      throw new Error('Used not acceptable param in scheme.');
    }

    return scheme;
  },
  /**
   * Used fot string that van be used safety as url for the model that is using it
   * @param {Object} scheme - Key:Value object describing what values can be set to this model's parameter.
   * @constructor
   * @return {Object}
   */
  Slug: function (scheme) {
    var acceptableScheme = 'autoFilled, based_On, minLength, maxLength, helpText, index, unique, default';

    if (schemeIsValid(scheme, acceptableScheme)) {
      scheme.type = 'slug';
      scheme.default = '';
    } else {
      throw new Error('Used not acceptable param in scheme.');
    }

    return scheme;
  },

  /**
   * Node relationship: 'is_friend_with', 'knows', 'is_reading' ...
   * @param {string} type
   * @param {Object} scheme
   * @return {Object}
   * @constructor
   */
  Rel: function (type, scheme) {
    var acceptableScheme = 'target, noun, helpText, plural, data';
    //target, noun, plural is required
    //all relationships will be outgoing only

    if (schemeIsValid(scheme, acceptableScheme)) {

      if (scheme.target === undefined || scheme.noun === undefined || scheme.plural === undefined) {
        throw new Error('"Target", "Noun" and "Plural" are required params in relationship\'s scheme');
      } else {
        //it's all fine modify and return the scheme
        scheme.type = type;
      }

    } else {
      throw new Error('Used not acceptable param in scheme.');
    }

    return scheme;
  }

};
