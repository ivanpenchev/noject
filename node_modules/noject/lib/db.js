/**
 * created by: Nikolai Aleksandrenko
 * email: aleksandrenko@gmail.com
 * www: aleksandrenko.com
 */

"use strict";

var neo4jApi = require('neo4j'),
    neo4j = new neo4jApi.GraphDatabase('http://localhost:7474'),
    Q = require('q');

module.exports = {
    /**
     * Executes cypher query against the neo4j rest api
     * @param {string} query
     * @param {object} params
     */
    query: function (query, params) {

    },

    /**
     * Registers model in the db amd creates methods like this:
     * db.user.getById, db.user.getAll, db.user.create(), db.user.getByUsername() //when username is a selected index
     * @param {object} new_model
     * @param {object} scheme
     */
    registerModel: function (modelType, newModel, scheme) {

        if (this[modelType] === undefined) {
            var instance = {};

            /**
             * Return an instance of the requested model filled with the provided data
             * @param {Object} data - Initial data for the model (key:value)
             * @return {Object} - Returns instance of model
             */
            instance.create = function (data) {
                var newNode = neo4j.createNode(data);
                return new newModel(newNode);
            };

            /**
             * @param {number} id
             */
            instance.getById = function (id) {
                var deferred = Q.defer();

                //next tick so done and fail functions can be assigned
                process.nextTick(function () {

                    neo4j.getNodeById(id, function (err, node) {
                        if (err) {
                            deferred.reject(err);
                        } else {

                            var newModelInstance = new newModel(node);
                            deferred.resolve(newModelInstance);

                            //delete INDEXES !!!
                            //delete model instance
                        }
                    });
                });

                return deferred.promise;
            };


            /**
             * Return instances of the model founded by the main key.
             */
            instance.getAll = function () {
                var deferred = Q.defer();

                neo4j.getIndexedNodes('nodes', 'type', modelType, function (err, node) {
                    if (err) {
                        deferred.reject(err);
                    } else {

                        var newModelInstance = new newModel(node);
                        deferred.resolve(newModelInstance);

                        //delete INDEXES !!!
                        //delete model instance
                    }
                });

                return deferred.promise;
            };

            // create function based on custom indexes in the scheme
            //model.getByUsername = function() {}
            //model.getByEmail = function() {}
            //
            // go through indexes
            //
            Object.keys(scheme).forEach(function (key) {
                var val = scheme[key];

                if (val.index) {
                    var getMethod = 'getBy' + key[0].toUpperCase() + key.slice(1);

                    /**
                     * New method for getting by index
                     * @param index_value
                     */
                    instance[getMethod] = function (index_value) {
                        var deferred = Q.defer();

                        //deferred.resolve(data);
                        //deferred.reject(err);

                        return deferred.promise;
                    };
                }
            });


            //add the new model to db
            this[modelType] = instance;
        }
    }

};
